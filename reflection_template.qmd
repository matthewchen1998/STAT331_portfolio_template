---
title: "STAT 331 Portfolio"
author: Matthew Chen
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`
-   lab 4

```{r wd-1-csv}

library(tidyverse)
library(dplyr)
library(here)

 avocado<-read_csv(here("week 4", "avocado.csv"))

```

-   `xlsx`
-   practice activity 4

```{r wd-1-xlsx}


military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 191)

```

-   `txt`
-   practice activity 5.1

```{r wd-1-txt}

message <- read_csv(here::here("data", "scrambled_message.txt")
                      )



```

**WD-2: I can select necessary columns from a dataset.**

-   Lab 4 question 4

```{r wd-2}

avocado_clean|>
  separate(col = Date, into = c('year','month','day'),sep ='/')|>
  select(month,total_volume)|>
  slice_max(total_volume)
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric
-   Lab 4 Question 3

```{r wd-3-numeric}


avocado_major_region|>
  filter(type =="organic",year ==2017)|>
  select(region,total_small)|>
  slice_max(total_small)

```

-   character -- specifically a string
-   Practice Activity 5.2

```{r wd-3-string}
message<-message|>
  filter(str_detect(string = Word, pattern = "ugh+[:punct:]") == FALSE)


```

-   factor
-   Lab 3 Question 11

```{r wd-3-factor}


hiphop_clean|>
   group_by(word)|>
  filter(familiarity ==1,age<20)|>
  summarise(familiarity = n())|>
  slice_max(familiarity)
```

-   date
-   Practice activity 5.1 question 2

```{r wd-3-date}


suspects <- suspects %>%
  filter(!wday(Time.Spotted, label = TRUE, abbr = FALSE) %in% c("Tuesday" , "Thursday"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric
-   Lab 4 question 6

```{r wd-4-numeric}

 california_new|>
  group_by(region)|>
  summarize(m_Conventional=mean(conventional),m_organic = mean(organic))|>
    mutate(diff_mean = m_organic - m_Conventional)|>
    distinct(abs(diff_mean), region)

```

-   character -- specifically a string
-   Practice Activity 5.2

```{r wd-4-string}
message<-message|>
  mutate(Word = str_replace(string = Word, pattern = "aa", replace = "ee"))

```

-   factor
-   lab 5 **capture over the week** question 3 (Revised-labs(title=))

```{r wd-4-factor}
surveys|>
  filter(day_of_week != "NA" )|>
  mutate(day_of_week = fct_recode(day_of_week, 
    "Weekday" = "Mon",
    "Weekday" = "Tue",
    "Weekday" = "Wed",
    "Weekday" = "Thu",
    "Weekday" = "Fri",
    "Weekend" = "Sat",
    "Weekend" = "Sun"))|>
  group_by(day_of_week)|>
  summarise(taxa = n())|>
  ggplot(aes( x = day_of_week, y =taxa, fill = day_of_week))+
     geom_col(show.legend = FALSE,width = 0.2)+
     labs(x = "day of week", 
          y = NULL,
  title = "Number of rodents captured either in weekend \n or in weekday")+
  theme(plot.title.position = "plot")


```

-   date
-   practice activity 5.1 question 1

```{r wd-4-date}
suspects <- suspects %>%
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted,
                                 tzone = "America/Los_Angeles")
         )

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`
-   preview activity 4

```{r wd-5-left}
prof_course|>
  left_join(prof_info)

```

-   `right_join()`
-   preview activity 4

```{r wd-5-right}
prof_course|>
  right_join(prof_info)
```

-   `inner_join()`
-   preview activity 4

```{r wd-5-inner}
inner_join(prof_info,prof_course)
```

-   `full_join()`
-   challenge 4

```{r wd-5-full}
join_dataset<-house_price_four_cities|>
  full_join(california_avocado_region, by = "region")|>
   select(region, AveragePrice, prices,Date,months,type)|>
  distinct(AveragePrice,prices,type)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`
-   lab 4 question 6

```{r wd-6-semi}
california_avocado_region<-avocado_clean|>
  semi_join(california_region, by = "region")
```

-   `anti_join()`
-   lab 4 question 5

```{r wd-6-anti}
avocado_metro_region<-avocado_clean|>
  anti_join(major_region, by = "region")|>
  anti_join(state_region, by = "region")|>
  filter(region!= "TotalUS")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`
-   challenge 4

```{r wd-7-long}
house_price_four_cities<-median_house_price|>
  semi_join(four_cities, by = "RegionName")|>
  pivot_longer(names_to = "months", values_to = "prices", c(-RegionID, -SizeRank, -RegionName,-RegionType,-StateName))|>
  rename(region = "RegionName")
```

-   `pivot_wider()`
-   lab 4 question 6

```{r wd-7-wide}
california_new<-california_avocado_region|>
  select(-(total_volume:total_extra_large),-year,Date)|>
  pivot_wider(names_from = type, values_from = AveragePrice)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1
-   lab 5 question 3 time-series-plot section

```{r r-2-1}
surveys|>
  group_by(genus,year)|>
  summarize(weight = mean(weight))|>
  ggplot( aes(y = weight, x = year,color = fct_reorder2(genus,year,weight)))+
  geom_line()+
  labs(x = "years", y = "weight (gm)", color = "genus")
```

-   Example 2
-   lab 4 question 4

```{r r-2-2}

 avocado_clean|>
  separate(col = Date, into = c('year','month','day'),sep ='/')|>
  select(month,total_volume)|>
  slice_max(total_volume)

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1
-   lab 4 question 5

```{r r-3-1}


avocado_metro_region|>
  group_by(region)|>
  summarize(mean_total_volume = mean(total_volume))|>
  slice_max(region, n=5)

```

-   Example 2
-   lab 7 question 3.1

```{r r-3-2}
 
  
  rescale01 <- function(vector) {
   
   stopifnot(is.numeric(vector),length(vector )>0)
   vector_rang<-range(vector, na.rm = TRUE)
  rescale<-(vector - vector_rang[1]) / (vector_rang[2]-vector_rang[1])
  return(rescale)
 }

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables
-   lab 2 question 6

```{r dvs-1-num}

ggplot(data = surveys, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point()+
  geom_jitter()+
   labs(x = "Weight (gm)", y = "hindfoot length (mm)")
 
```

-   numeric variables and categorical variables
-   lab 5 revisiting lab 2 section question 2 (Revised-labs(title=))

```{r dvs-2-num-cat}


ggplot(data = surveys,
  mapping = aes(x = weight, y = fct_reorder(species,weight)))+
  geom_boxplot()+
   labs(x = "Weight (gm)", 
        y = NULL,
       title= "Weights for Each Animal Species")+
   theme( plot.title.position = "plot")
     

```

-   categorical variables
-   lab 3 question 10

```{r dvs-2-cat}
     ggplot(data = demo,
  mapping = aes(x = ethnic, fill = ethnic))+
    geom_bar(show.legend = FALSE)+
    labs(x = "Ethnicity of Participants", y = "number of student",
         title = "The Ethnic Background of Students in the Study")

```

-   dates
-   lab 9 section 3: question 3

```{r dvs-2-date}

allison_f|>
  group_by(Year)|>
  summarise(sum(Count))|>
  rename(N_of_Allison = "sum(Count)")|>
  ggplot( aes(y = N_of_Allison, x = Year))+
  geom_line(color = "red" )+
  labs(x = "years", y = "Number of Allison", title = "Popularity of Allison over the years")+
  theme( plot.title.position = "plot")

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1
-   lab 5 question 3 capture 0ver the week section (Revised - theme(plot.title.position = "plot") and revised-labs(title = ))

```{r dvs-2-1}
surveys|>
  filter(day_of_week != "NA" )|>
  mutate(day_of_week = fct_recode(day_of_week, 
    "Weekday" = "Mon",
    "Weekday" = "Tue",
    "Weekday" = "Wed",
    "Weekday" = "Thu",
    "Weekday" = "Fri",
    "Weekend" = "Sat",
    "Weekend" = "Sun"))|>
  group_by(day_of_week)|>
  summarise(taxa = n())|>
  ggplot(aes( x = day_of_week, y =taxa, fill = day_of_week))+
     geom_col(show.legend = FALSE,width = 0.2)+
     labs(x = "day of week", 
          y = NULL,
          title = "Number of rodents captured either in weekend \n or in weekday")+
  theme(plot.title.position = "plot")
```

-   Example 2
-   lab 5 question 3 (Revised-labs(title=))

```{r dvs-2-2}
  ggplot(data = california_graph, 
           mapping = aes( x = region, y = diff_price, fill = region))+
      geom_col(show.legend = FALSE,width = 0.4)+
      scale_x_discrete(expand=c(0,0))+
      scale_y_continuous(expand=c(0,0)) +
          labs(y = "differences in price", 
               x= "cities of California",
               title = "differences in price of organic vs. conventional \n avocado across four California cities")+
      theme(plot.title = element_text(hjust = 0.5))
```

**DVS-3: I show creativity in my visualizations**

-   Example 1
-   lab 4 question 7

```{r dvs-3-1}
  ggplot(data = California_mean_graph, aes(x = region, y = Avocado_sold, fill = Avocado_Size))+
    
    geom_col(position = position_fill(reverse = TRUE))+
    labs(y = "Proportion of Mean Avocado Sold", x = "Region of CA")+
    facet_wrap(.~type)+
    
    guides(fill = guide_legend(title = "Avocado Size"))+
    scale_fill_discrete(labels = c("extra large", "large","small"))
  
```

-   Example 2
-   challenge 2

```{r dvs-3-2}


ggplot(data = surveys,
  mapping = aes(x = weight, y = species, fill= species))+
  geom_density_ridges(rel_min_height = 0.005, scale = 4, alpha = 0.4, color = "white") +
  scale_x_continuous(expand=c(0,0))+
  scale_y_discrete(expand = c(0,0))+
   labs(x = "Weight (gm)", y = "Animal Species" )

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1
-   lab 3 question 4

```{r dvs-4-1}

hiphop|>
  summarize(across(asianMove:whiteMove,mean), blackWeekly = mean(blackWeekly))
```

-   Example 2
-   lab 7 question 2.1

```{r dvs-4-2}
 blackfoot_missing<-blackfoot|>
   summarize(across(.col = everything(),
                    ~sum(is.na(.x))))
 print(blackfoot_missing)


```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1
-   lab 4 question 5

```{r dvs-5-1}

avocado_metro_region|>
  group_by(region)|>
  summarize(mean_total_volume = mean(total_volume))|>
  slice_max(region, n=5)
```

-   Example 2
-   lab 9 section 3: question 1

```{r dvs-5-2}
name|>
  rename(sex = Gender)|>
  filter(Name == "Allison")|>
  group_by(sex,State)|>
  summarise(Name = n(), .groups = 'drop')|>
  pivot_wider(names_from = sex, values_from = Name, values_fill = 0)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1
-   challenge 9 question 9 table

```{r dvs-6-1}
Q9_table|>
  gt()|>
  tab_header(title = md("**Frequency of the three different spelling of *Allan* in California and Pennsylvania**"))|>
  tab_options(column_labels.background.color = "red")|>
  tab_style(style = cell_borders(color = "blue", sides = c("left", "right")), locations = cells_body(columns = State))|>
  as_raw_html()

```

-   Example 2
-   challenge 9 question 5 table

```{r dvs-6-2}
Q5_table|>
  gt()|>
  tab_header(title = md("**Regression Table for *Number of Allison***"))|>
  tab_options(column_labels.background.color = "green")|>
  as_raw_html()
```

**DVS-7: I show creativity in my tables.**

-   Example 1
-   challenge 9 question 10 table

```{r dvs-7-1}
Q10_table<-male_name|>
  filter(Year == 2000, State %in%c("PA","CA"))|>
  select(Name,State,Count)|>
  group_by(State)|>
  mutate(percent = (Count/sum(Count)))|>
  ungroup()|>
  select(!Count)|>
  pivot_wider(names_from = Name, values_from = percent)

Q10_table|>
  gt()|>
  tab_header(title = md("**Percentages of the three different spelling of *Allan* in California and Pennsylvania**"))|>
  fmt_percent(columns = 2:4, decimals = 1)|>
 tab_options(column_labels.background.color = "blue")|>
  tab_style(style = cell_borders(color = "red", sides = c("left", "right")), locations = cells_body(columns = State))|>
  as_raw_html()

```

-   Example 2
-   challenge 9 question 1 table

```{r dvs-7-2}

Q1_table<-name|>
  rename(sex = Gender)|>
  filter(Name == "Allison")|>
  group_by(sex,State)|>
  summarise(Name = n(), .groups = 'drop')|>
  pivot_wider(names_from = sex, values_from = Name, values_fill = 0)

Q1_table|>
  gt()|>
  cols_label(F = md("**Female**"), M = md("**Male**"), State = md("**State**")) |>
  tab_header(title = md("**Number of Allison**"),
             subtitle =md("**for each state and sex**"))|>
  as_raw_html()
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call
-   lab 3 question 14

```{r pe-1-one-call}
hiphop_clean|>
  mutate(bieber = as.numeric(bieber))|>
  filter(city > 10000 & city< 60000, age> 17 & age< 23, ethnic == "white", sex == "Male", bieber >= 5)|>
  distinct(subj)
```

-   `across()`
-   lab 3 question 5 (Revised-across(.cols = c(), .fns = \~as.factor(.x))

```{r pe-1-across}
hiphop_clean <- hiphop |>
  mutate(across(.cols = c(familiarity, jayz, jayz1, barkley, boondocks,
boondocks1, monique, bieber, word, subj, ethnic,sex),
.fns = ~as.factor(.x)))|>
  select(-one_of("numPreferredArtists","numOverallArtists"))
```

-   `map()` functions
-   lab 8 section: **use your function**

```{r pe-1-map-1}
full_song<- map_chr(1:12, 
               ~sing_day(dataset = xmas2, 
                         line = .x, 
                         phrase_col= Full.Phrase))
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1
-   lab 7 question 3.1

```{r pe2-1}
rescale01 <- function(vector) {
   
   stopifnot(is.numeric(vector),length(vector )>0)
   vector_rang<-range(vector, na.rm = TRUE)
  rescale<-(vector - vector_rang[1]) / (vector_rang[2]-vector_rang[1])
  return(rescale)
 }
  
```

-   Example 2
-   lab 7 question 3.5

```{r pe2-2}
rescale_column<-function (data_f, vars){
data_f<-data_f|>
    mutate(across(.cols = {{vars}}, 
                  ~rescale01(.x)))
return(data_f)
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`
-   lab 3 question 4

```{r pe-3-across}
hiphop|>
  summarize(across(asianMove:whiteMove,mean), blackWeekly = mean(blackWeekly))

```

-   `map()` functions (Provide 2 Examples)
-   lab 8 section **use your function**

```{r pe-3-map-1}
full_song<- map_chr(1:12, 
               ~sing_day(dataset = xmas2, 
                         line = .x, 
                         phrase_col= Full.Phrase))
```

-   practice activity 9.2

```{r pe-3-map-2}
my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, n_cor = 110, n_reed = 1035)
                      ) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1
-   lab 3 question 11

```{r pe-4-1}

hiphop_clean|>
   group_by(word)|>
  filter(familiarity ==1,age<20)|>
  summarise(familiarity = n())|>
  slice_max(familiarity)

```

-   Example 2
-   lab 7 question part 2.1

```{r pe-4-2}


 blackfoot_missing<-blackfoot|>
   summarize(across(.col = everything(),
                    ~sum(is.na(.x))))
 print(blackfoot_missing)

```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   practice activity 9.2

```{r dsm-1-1}
set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = 0.8)
  cornets <- runif(n_cor, min = 1.5, max= 3.5 )
  reeds <- rchisq(n_reed, 4)
  total_weight<- sum(trombones,cornets, reeds)
  return(total_weight)
  
}
```

-   Example 2

```{r dsm-1-2}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   practice activity 9.1

```{r dsm-2-1}
animal_lm<-lm(weight_after~weight_before, data = animal)
```

-   section 4: question 4 and question 5

```{r dsm-2-2}
allison_lm<-lm(N_of_Allison~Year, data = allison_data)

get_regression_table(allison_lm)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Answer: Before lab 5, I do not know that I could use the dplyr function along with the ggplot to create plots and graphs. On Lab 5, I have used the dplyr function to pipe functions into my ggplots. Previously, I always thought that you need to create another dataset in order to create a graph using the ggplot. After I have submitted my lab 5 assignment, I have found out that I do not fully follow Will Chase to have my titles of the graph to be left-aligned. Previously, I only know how to center the titles of the graph as I do not know about the importance of left-alignment of the titles. After doing some research, I have found out that using theme(plot.title.position = "plot") will create a left-alignment for your graph titles. I have also learned that ggtitle function is unnecessary as you could use the title option within the labs function. I have changed my old way of using the across function to a new way of using the across function by using .cols and .fns within across.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

Answer: Throughout the course, I have been think about about how to divide my titles into two lines when the lines are too long. Through some research, I have found out that by using the escape character "\\n" I could divide my titles into two lines. I started to use the escape character "\\n" on my lab 4 assignment. I also learned how to center my title for the graph when I was doing my lab 4 assignment. I found out that the function "theme(plot.title = element_text(hjust = 0.5))" allows you to center your title for the graph after doing some research . When I was doing research for my Challenge 4 assignment, I have learned how to remove spaces between character strings within a variable using the "gsub" function. I have learned that in order for my one of my table in challenge 9 to have the percent sign output I need to use the ungroup function because I am doing transformation for the entire dataset.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

Answer: Throughout the course, I have provided help for my team members during Practice acitivity by doing research for my team members as an editor and ask Professor for help if we do not understand some of the instructions of the materials. During peer review, I try my best to offer feedbacks that both point out what they have done right and wrong and offer them advice on improving their codes. In the image below, I provided feedbacks that both points out his mistakes and offers him advice on how to improve his codes. ![](images/Screen%20Shot%202023-02-19%20at%203.11.49%20PM.png)
